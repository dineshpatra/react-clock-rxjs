{"version":3,"sources":["HOC/withTimer.tsx","Services/TimerSrv.ts","Components/AnalogueClock.tsx","Components/DigitalClock.tsx","Components/Alram.tsx","ErrorBoundry/CatchError.tsx","Components/MainComponent.tsx","index.tsx"],"names":["AMORPM","subject$","Subject","TimerSrv","time","next","asObservable","withTimer","WrappedComponent","state","hour","minute","second","hour12","amOrPM","AM","getAmOrPm","PM","getHour12","timer","subscribe","timeObj","setState","prevState","getHours","getMinutes","getSeconds","this","Component","newComponent","type","deg","props","id","className","Array","from","length","map","_","index","style","transform","getRotateDeg","num","toLocaleString","minimumIntegerDigits","twoDigit","AnalogueClock","setInterval","Date","clearInterval","CatchError","hasError","error","info","console","children","MainComponent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c64b75f6.chunk.js","sourcesContent":["import {Component, ComponentType} from 'react';\r\nimport {TimerSrv as timer} from '../Services/TimerSrv';\r\n\r\nenum AMORPM {\r\n    AM = \"AM\",\r\n    PM = \"PM\"\r\n}\r\ntype State = {\r\n    hour   : number,\r\n    minute : number,\r\n    second : number,\r\n    hour12 : number,\r\n    amOrPM : AMORPM\r\n}\r\nexport interface PropType {\r\n    readonly hour   : number,\r\n    readonly minute : number,\r\n    readonly second : number,\r\n    readonly hour12 : number,\r\n    readonly amOrPM : AMORPM\r\n}\r\n\r\nexport const withTimer = (WrappedComponent:ComponentType<any>): ComponentType => {\r\n\r\n    return class EnhancedComponent extends Component {\r\n        state: State = {\r\n            hour   : 0,\r\n            minute : 0,\r\n            second : 0,\r\n            hour12 : 0,\r\n            amOrPM : AMORPM.AM\r\n        }\r\n        getAmOrPm = (hour: number): AMORPM => {\r\n            return hour > 12 ? AMORPM.PM : AMORPM.AM;\r\n        }\r\n        getHour12 = (hour: number): number => {\r\n            if (hour === 0) return 0;\r\n            if (hour > 12)  return hour - 12;\r\n            return hour;\r\n        }\r\n        componentDidMount() {\r\n            timer.onTimeUpdated().subscribe((timeObj:any) => {\r\n                let timer = timeObj.time as Date;\r\n                this.setState((prevState: State) => ({\r\n                    ...prevState,\r\n                    hour    : timer.getHours(),\r\n                    minute  : timer.getMinutes(),\r\n                    second  : timer.getSeconds(),\r\n                    amOrPM  : this.getAmOrPm(timer.getHours()),\r\n                    hour12  : this.getHour12(timer.getHours())\r\n                }));\r\n            }); \r\n        }\r\n        componentWillUnmount() {\r\n            timer.clearTimer();\r\n        }\r\n        render():JSX.Element {\r\n            return (\r\n                <WrappedComponent \r\n                    hour   = { this.state.hour   }\r\n                    minute = { this.state.minute }\r\n                    second = { this.state.second }\r\n                    amOrPM = { this.state.amOrPM }\r\n                    hour12 = { this.state.hour12 }\r\n                />\r\n            )\r\n        }\r\n    }\r\n}","import { Subject } from 'rxjs';\r\n\r\nconst subject$ = new Subject();\r\n\r\nexport const TimerSrv = {\r\n    updateTime    : (time:Date) => subject$.next({ time: time }),\r\n    onTimeUpdated : () => subject$.asObservable(),\r\n    clearTimer    : () => subject$.next()\r\n};","import {Component} from 'react';\r\nimport '../assets/scss/AnalogueClock.scss';\r\nimport {withTimer, PropType} from '../HOC/withTimer';\r\ninterface p extends PropType {\r\n    a: string\r\n}\r\nclass AnalogueClock extends Component<Readonly<p>> {\r\n\r\n    getRotateDeg(type: \"second\" | \"minute\" | \"hour\"): string {\r\n        let deg: number = 0;\r\n        switch (type) {\r\n            case \"second\":\r\n                deg = 6 * this.props.second;\r\n                break;\r\n            case \"minute\":\r\n                deg = (6 * this.props.minute )\r\n                    + ((6/60) * this.props.second);\r\n                break;\r\n            case \"hour\":\r\n                deg = (30 * this.props.hour12) \r\n                    + ((6/60) * this.props.minute) \r\n                    + ((1/120) * this.props.second);\r\n                break;\r\n        }\r\n        return \"rotate(\" + deg + \"deg)\"; \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"analogue-clock\">\r\n                <div className=\"clock-border\">\r\n                    <div className=\"panel\">\r\n                        {\r\n                            Array.from({length:59}).map((_, index) => {\r\n                                return <span>{index%5 === 0 ? ((index === 0) ? 12 : (index/5 < 10 ? '0' + index/5 : index/5)  ) : '.'}</span>\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div className=\"controlPanel\">\r\n                        <div className=\"controlBox\"></div>\r\n                        <span className=\"hands hourHand\" style={{ transform: this.getRotateDeg('hour') } }></span>\r\n                        <span className=\"hands minHand\"  style={{ transform: this.getRotateDeg('minute') } }></span>\r\n                        <span className=\"hands secHand\"  style={{ transform: this.getRotateDeg('second') } }></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst newComponent = withTimer(AnalogueClock);\r\nexport default newComponent;","import {Component} from 'react';\r\nimport '../assets/scss/DigitalClock.scss';\r\nimport {withTimer, PropType} from '../HOC/withTimer';\r\n\r\nclass DigitalClock extends Component<Readonly<PropType>> {\r\n\r\n    twoDigit(num: number): string {\r\n        return num.toLocaleString(\"en-US\", {\r\n            minimumIntegerDigits: 2\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"digital-clock\"> \r\n                <h4>{ this.twoDigit(this.props.hour12) }</h4>\r\n                <h4>:</h4>\r\n                <h4>{ this.twoDigit(this.props.minute) }</h4>\r\n                <h4>:</h4>\r\n                <h4>{ this.twoDigit(this.props.second) }</h4>\r\n                <h4>{ this.props.amOrPM }</h4>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst newComponent = withTimer(DigitalClock);\r\nexport default newComponent;","import {Component} from 'react';\r\nimport {TimerSrv} from '../Services/TimerSrv';\r\nexport default class AnalogueClock extends Component {\r\n    timer: any;\r\n    componentDidMount() {\r\n        this.timer = setInterval(() => {\r\n            TimerSrv.updateTime(new Date());\r\n        }, 1000);\r\n    }\r\n    componentWillUnmount() {\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <span>\r\n                    Time updated from here\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}","import { Component, ErrorInfo } from 'react';\r\n\r\n\r\n/**\r\n * Defining type for component\r\n * state.\r\n */\r\ntype State = {\r\n    hasError: boolean;\r\n}\r\n\r\nexport default class CatchError extends Component {\r\n\r\n    /**\r\n     * Define the state of the component\r\n     */\r\n    state: State = {\r\n        hasError: false\r\n    }\r\n\r\n    /**\r\n     * The getDerivedStateFromError() method is \r\n     * invoked if some error occurs during the \r\n     * rendering phase of any lifecycle methods \r\n     * or any children components.\r\n     * \r\n     * @param _error \r\n     */\r\n    static getDerivedStateFromError(_: Error): State {\r\n        return { hasError: true };\r\n    }\r\n\r\n    /**\r\n     * This lifecycle method is invoked\r\n     * after the decendant component throws\r\n     * error\r\n     * \r\n     * @param error :\r\n     *  The error thrown by the child components\r\n     * @param info \r\n     *  key containg information about which component threw error\r\n     */\r\n    componentDidCatch(error: Error, info: ErrorInfo) {\r\n        console.error(error, info);\r\n    }\r\n\r\n    /**\r\n     * The render() function should be pure, \r\n     * meaning that it does not modify component state,\r\n     *  it returns the same result each time it’s invoked, \r\n     * and it does not directly interact with the browser.\r\n     */\r\n    render() {\r\n        return this.state.hasError ? (\r\n            <div>Something went wrong</div>\r\n        ) : (\r\n            this.props.children\r\n        );\r\n    }\r\n}","import { Component } from 'react';  \r\nimport AnalogueClock from './AnalogueClock';\r\nimport DigitalClock  from './DigitalClock';\r\nimport Alram         from './Alram';\r\nimport CatchError    from '../ErrorBoundry/CatchError';\r\n\r\nexport default class MainComponent extends Component {\r\n   \r\n    render() {\r\n        return (\r\n            <>\r\n                <CatchError>\r\n                    <AnalogueClock />\r\n                </CatchError>\r\n                <CatchError>\r\n                    <DigitalClock />\r\n                </CatchError>\r\n                <CatchError>\r\n                    <Alram />\r\n                </CatchError>\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/main.scss';\nimport MainComponent from './Components/MainComponent';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainComponent />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}